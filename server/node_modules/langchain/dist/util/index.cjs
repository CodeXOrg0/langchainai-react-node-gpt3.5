"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chunkArray = exports.parseFileConfig = exports.resolveConfigFromFile = exports.resolveTemplateFromFile = exports.fetchWithTimeout = exports.loadFromFile = exports.extname = void 0;
const yaml = __importStar(require("yaml"));
const extname = (path) => `.${path.split(".").pop()}`;
exports.extname = extname;
const loadFromFile = async (uri, loader, values = {}) => {
    try {
        const fs = await import("node:fs/promises");
        return loader(await fs.readFile(uri, { encoding: "utf-8" }), uri, values);
    }
    catch (e) {
        console.error(e);
        throw new Error(`Could not load file at ${uri}`);
    }
};
exports.loadFromFile = loadFromFile;
const fetchWithTimeout = async (url, init) => {
    const { timeout, ...rest } = init;
    const res = await fetch(url, {
        ...rest,
        signal: AbortSignal.timeout(timeout),
    });
    return res;
};
exports.fetchWithTimeout = fetchWithTimeout;
const loadFileContents = (contents, format) => {
    switch (format) {
        case ".json":
            return JSON.parse(contents);
        case ".yml":
        case ".yaml":
            return yaml.parse(contents);
        default:
            throw new Error(`Unsupported filetype ${format}`);
    }
};
const resolveFieldFromFile = async (fieldName, config, load, allowExtensions) => {
    const fieldPath = config[`${fieldName}_path`];
    const field = config[fieldName];
    if (fieldPath !== undefined && field !== undefined) {
        throw new Error(`Both '${fieldName}_path' and '${fieldName}' cannot be provided.`);
    }
    if (field !== undefined) {
        return field;
    }
    if (fieldPath !== undefined) {
        const suffix = (0, exports.extname)(fieldPath);
        if (allowExtensions && !allowExtensions.includes(suffix)) {
            throw new Error("Invalid file type");
        }
        try {
            const fs = await import("node:fs/promises");
            return load(await fs.readFile(fieldPath, { encoding: "utf-8" }), suffix);
        }
        catch (e) {
            console.error(e);
            throw new Error(`Unable to read file ${fieldPath}: ${e}`);
        }
    }
    throw new Error(`One of '${fieldName}_path' and '${fieldName}' must be provided.`);
};
const resolveTemplateFromFile = async (fieldName, config) => resolveFieldFromFile(fieldName, config, (contents) => contents, [".txt"]);
exports.resolveTemplateFromFile = resolveTemplateFromFile;
const resolveConfigFromFile = async (fieldName, config) => resolveFieldFromFile(fieldName, config, loadFileContents, [".json", ".yaml"]);
exports.resolveConfigFromFile = resolveConfigFromFile;
const parseFileConfig = (text, path, supportedTypes) => {
    const suffix = (0, exports.extname)(path);
    if (![".json", ".yaml"].includes(suffix) ||
        (supportedTypes && !supportedTypes.includes(suffix))) {
        throw new Error(`Unsupported filetype ${suffix}`);
    }
    return loadFileContents(text, suffix);
};
exports.parseFileConfig = parseFileConfig;
const chunkArray = (arr, chunkSize) => arr.reduce((chunks, elem, index) => {
    const chunkIndex = Math.floor(index / chunkSize);
    const chunk = chunks[chunkIndex] || [];
    // eslint-disable-next-line no-param-reassign
    chunks[chunkIndex] = chunk.concat([elem]);
    return chunks;
}, []);
exports.chunkArray = chunkArray;
//# sourceMappingURL=index.js.map